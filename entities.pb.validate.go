// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: entities.proto

package entities_crud

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventsFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventsFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventsFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventsFilterMultiError, or
// nil if none found.
func (m *EventsFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *EventsFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for DateStart

	// no validation rules for DateEnd

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventsFilterValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventsFilterValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventsFilterValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventsFilterMultiError(errors)
	}
	return nil
}

// EventsFilterMultiError is an error wrapping multiple validation errors
// returned by EventsFilter.ValidateAll() if the designated constraints aren't met.
type EventsFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventsFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventsFilterMultiError) AllErrors() []error { return m }

// EventsFilterValidationError is the validation error returned by
// EventsFilter.Validate if the designated constraints aren't met.
type EventsFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventsFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventsFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventsFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventsFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventsFilterValidationError) ErrorName() string { return "EventsFilterValidationError" }

// Error satisfies the builtin error interface
func (e EventsFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventsFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventsFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventsFilterValidationError{}

// Validate checks the field values on EventsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventsResponseMultiError,
// or nil if none found.
func (m *EventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for Items

	if len(errors) > 0 {
		return EventsResponseMultiError(errors)
	}
	return nil
}

// EventsResponseMultiError is an error wrapping multiple validation errors
// returned by EventsResponse.ValidateAll() if the designated constraints
// aren't met.
type EventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventsResponseMultiError) AllErrors() []error { return m }

// EventsResponseValidationError is the validation error returned by
// EventsResponse.Validate if the designated constraints aren't met.
type EventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventsResponseValidationError) ErrorName() string { return "EventsResponseValidationError" }

// Error satisfies the builtin error interface
func (e EventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventsResponseValidationError{}

// Validate checks the field values on FilterParam with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterParam with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterParamMultiError, or
// nil if none found.
func (m *FilterParam) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return FilterParamMultiError(errors)
	}
	return nil
}

// FilterParamMultiError is an error wrapping multiple validation errors
// returned by FilterParam.ValidateAll() if the designated constraints aren't met.
type FilterParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterParamMultiError) AllErrors() []error { return m }

// FilterParamValidationError is the validation error returned by
// FilterParam.Validate if the designated constraints aren't met.
type FilterParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterParamValidationError) ErrorName() string { return "FilterParamValidationError" }

// Error satisfies the builtin error interface
func (e FilterParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterParamValidationError{}

// Validate checks the field values on CountsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CountsResponseMultiError,
// or nil if none found.
func (m *CountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CountsResponseValidationError{
						field:  fmt.Sprintf("Counts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CountsResponseValidationError{
						field:  fmt.Sprintf("Counts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CountsResponseValidationError{
					field:  fmt.Sprintf("Counts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CountsResponseMultiError(errors)
	}
	return nil
}

// CountsResponseMultiError is an error wrapping multiple validation errors
// returned by CountsResponse.ValidateAll() if the designated constraints
// aren't met.
type CountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountsResponseMultiError) AllErrors() []error { return m }

// CountsResponseValidationError is the validation error returned by
// CountsResponse.Validate if the designated constraints aren't met.
type CountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountsResponseValidationError) ErrorName() string { return "CountsResponseValidationError" }

// Error satisfies the builtin error interface
func (e CountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountsResponseValidationError{}

// Validate checks the field values on Counts with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Counts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Counts with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CountsMultiError, or nil if none found.
func (m *Counts) ValidateAll() error {
	return m.validate(true)
}

func (m *Counts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Img

	// no validation rules for Count

	if len(errors) > 0 {
		return CountsMultiError(errors)
	}
	return nil
}

// CountsMultiError is an error wrapping multiple validation errors returned by
// Counts.ValidateAll() if the designated constraints aren't met.
type CountsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountsMultiError) AllErrors() []error { return m }

// CountsValidationError is the validation error returned by Counts.Validate if
// the designated constraints aren't met.
type CountsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountsValidationError) ErrorName() string { return "CountsValidationError" }

// Error satisfies the builtin error interface
func (e CountsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCounts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountsValidationError{}

// Validate checks the field values on MetaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetaRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetaRequestMultiError, or
// nil if none found.
func (m *MetaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := MetaRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = MetaRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPhone()) > 256 {
		err := MetaRequestValidationError{
			field:  "Phone",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_MetaRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := MetaRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^\\\\+?7(9\\\\d{9})$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MetaRequestMultiError(errors)
	}
	return nil
}

func (m *MetaRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *MetaRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// MetaRequestMultiError is an error wrapping multiple validation errors
// returned by MetaRequest.ValidateAll() if the designated constraints aren't met.
type MetaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaRequestMultiError) AllErrors() []error { return m }

// MetaRequestValidationError is the validation error returned by
// MetaRequest.Validate if the designated constraints aren't met.
type MetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaRequestValidationError) ErrorName() string { return "MetaRequestValidationError" }

// Error satisfies the builtin error interface
func (e MetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaRequestValidationError{}

var _MetaRequest_Phone_Pattern = regexp.MustCompile("^\\+?7(9\\d{9})$")

// Validate checks the field values on ConstructionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConstructionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstructionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConstructionsRequestMultiError, or nil if none found.
func (m *ConstructionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstructionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetConstructionsIds()) < 1 {
		err := ConstructionsRequestValidationError{
			field:  "ConstructionsIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConstructionsRequestMultiError(errors)
	}
	return nil
}

// ConstructionsRequestMultiError is an error wrapping multiple validation
// errors returned by ConstructionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ConstructionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstructionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstructionsRequestMultiError) AllErrors() []error { return m }

// ConstructionsRequestValidationError is the validation error returned by
// ConstructionsRequest.Validate if the designated constraints aren't met.
type ConstructionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstructionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstructionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstructionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstructionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstructionsRequestValidationError) ErrorName() string {
	return "ConstructionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConstructionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstructionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstructionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstructionsRequestValidationError{}

// Validate checks the field values on InfoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoResponseMultiError, or
// nil if none found.
func (m *InfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InfoResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InfoResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InfoResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return InfoResponseMultiError(errors)
	}
	return nil
}

// InfoResponseMultiError is an error wrapping multiple validation errors
// returned by InfoResponse.ValidateAll() if the designated constraints aren't met.
type InfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoResponseMultiError) AllErrors() []error { return m }

// InfoResponseValidationError is the validation error returned by
// InfoResponse.Validate if the designated constraints aren't met.
type InfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoResponseValidationError) ErrorName() string { return "InfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e InfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoResponseValidationError{}

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Item with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemMultiError, or nil if none found.
func (m *Item) ValidateAll() error {
	return m.validate(true)
}

func (m *Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for StartingDate

	if len(errors) > 0 {
		return ItemMultiError(errors)
	}
	return nil
}

// ItemMultiError is an error wrapping multiple validation errors returned by
// Item.ValidateAll() if the designated constraints aren't met.
type ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMultiError) AllErrors() []error { return m }

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on MetaResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetaResponseMultiError, or
// nil if none found.
func (m *MetaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMeta() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetaResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetaResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetaResponseValidationError{
					field:  fmt.Sprintf("Meta[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetaResponseMultiError(errors)
	}
	return nil
}

// MetaResponseMultiError is an error wrapping multiple validation errors
// returned by MetaResponse.ValidateAll() if the designated constraints aren't met.
type MetaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaResponseMultiError) AllErrors() []error { return m }

// MetaResponseValidationError is the validation error returned by
// MetaResponse.Validate if the designated constraints aren't met.
type MetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaResponseValidationError) ErrorName() string { return "MetaResponseValidationError" }

// Error satisfies the builtin error interface
func (e MetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaResponseValidationError{}

// Validate checks the field values on Meta with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Meta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetaMultiError, or nil if none found.
func (m *Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Count

	if len(errors) > 0 {
		return MetaMultiError(errors)
	}
	return nil
}

// MetaMultiError is an error wrapping multiple validation errors returned by
// Meta.ValidateAll() if the designated constraints aren't met.
type MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaMultiError) AllErrors() []error { return m }

// MetaValidationError is the validation error returned by Meta.Validate if the
// designated constraints aren't met.
type MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaValidationError) ErrorName() string { return "MetaValidationError" }

// Error satisfies the builtin error interface
func (e MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaValidationError{}
